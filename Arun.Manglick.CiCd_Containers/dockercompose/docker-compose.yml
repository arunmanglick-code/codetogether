version: "3.9"
services:
  web:
    build: .
    ports:
      - "8000:5000"
  redis:
    image: "redis:alpine"

# Web service
# Here The web service uses an image thatâ€™s built from the Dockerfile in the current directory. 
# It then binds the container and the host machine to the exposed port, 8000. 
# This example service uses the default port for the Flask web server, 5000.

# Redis service
# The redis service uses a public Redis image pulled from the Docker Hub registry.

# docker compose up
# Compose builds an image for your code, pulls a Redis image, and starts the services you defined. 
# In this case, the code is statically copied into the image at build time.

# How to run:
#  - Open Command Prompt: docker-compose up
#  - Then browse http://localhost:8000/

# ------------------------------------------------------------------------------------------

# version: "3.9"
# services:
#   web:
#     build: .
#     ports:
#       - "8000:5000"
#     volumes:
#       - .:/code
#     environment:
#       FLASK_ENV: development
#   redis:
#     image: "redis:alpine"

# The new 'volumes' key mounts the project directory (current directory) on the host to /code inside the container,
# This allows you to modify the code on the fly, without having to rebuild the image. 

# The 'environment' key sets the FLASK_ENV environment variable, which tells flask run to run in development mode and reload the code on change. 
# This mode should only be used in development.