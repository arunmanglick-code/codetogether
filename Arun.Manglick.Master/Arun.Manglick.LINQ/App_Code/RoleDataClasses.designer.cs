#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[System.Data.Linq.Mapping.DatabaseAttribute(Name="MDE_AUTHORIZATION")]
public partial class RoleDataClassesDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertENVIRONMENT(ENVIRONMENT instance);
  partial void UpdateENVIRONMENT(ENVIRONMENT instance);
  partial void DeleteENVIRONMENT(ENVIRONMENT instance);
  partial void InsertHISTORY(HISTORY instance);
  partial void UpdateHISTORY(HISTORY instance);
  partial void DeleteHISTORY(HISTORY instance);
  partial void InsertMDE_LENDER(MDE_LENDER instance);
  partial void UpdateMDE_LENDER(MDE_LENDER instance);
  partial void DeleteMDE_LENDER(MDE_LENDER instance);
  partial void InsertPERMISSION(PERMISSION instance);
  partial void UpdatePERMISSION(PERMISSION instance);
  partial void DeletePERMISSION(PERMISSION instance);
  partial void InsertROLE(ROLE instance);
  partial void UpdateROLE(ROLE instance);
  partial void DeleteROLE(ROLE instance);
  partial void InsertROLE_PERMISSION(ROLE_PERMISSION instance);
  partial void UpdateROLE_PERMISSION(ROLE_PERMISSION instance);
  partial void DeleteROLE_PERMISSION(ROLE_PERMISSION instance);
  partial void InsertROLE_USER(ROLE_USER instance);
  partial void UpdateROLE_USER(ROLE_USER instance);
  partial void DeleteROLE_USER(ROLE_USER instance);
  #endregion
	
	public RoleDataClassesDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["MDE_AUTHORIZATIONConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public RoleDataClassesDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public RoleDataClassesDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public RoleDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public RoleDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<ENVIRONMENT> ENVIRONMENTs
	{
		get
		{
			return this.GetTable<ENVIRONMENT>();
		}
	}
	
	public System.Data.Linq.Table<HISTORY> HISTORies
	{
		get
		{
			return this.GetTable<HISTORY>();
		}
	}
	
	public System.Data.Linq.Table<LOOKUP_LANGUAGE> LOOKUP_LANGUAGEs
	{
		get
		{
			return this.GetTable<LOOKUP_LANGUAGE>();
		}
	}
	
	public System.Data.Linq.Table<MDE_LENDER> MDE_LENDERs
	{
		get
		{
			return this.GetTable<MDE_LENDER>();
		}
	}
	
	public System.Data.Linq.Table<PERMISSION> PERMISSIONs
	{
		get
		{
			return this.GetTable<PERMISSION>();
		}
	}
	
	public System.Data.Linq.Table<ROLE> ROLEs
	{
		get
		{
			return this.GetTable<ROLE>();
		}
	}
	
	public System.Data.Linq.Table<ROLE_PERMISSION> ROLE_PERMISSIONs
	{
		get
		{
			return this.GetTable<ROLE_PERMISSION>();
		}
	}
	
	public System.Data.Linq.Table<ROLE_USER> ROLE_USERs
	{
		get
		{
			return this.GetTable<ROLE_USER>();
		}
	}
}

[Table(Name="dbo.ENVIRONMENT")]
public partial class ENVIRONMENT : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ENVIRONMENT_ID;
	
	private string _SHORT_NAME;
	
	private string _LONG_NAME;
	
	private string _DESCRIPTION;
	
	private EntitySet<ROLE_USER> _ROLE_USERs;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnENVIRONMENT_IDChanging(System.Guid value);
    partial void OnENVIRONMENT_IDChanged();
    partial void OnSHORT_NAMEChanging(string value);
    partial void OnSHORT_NAMEChanged();
    partial void OnLONG_NAMEChanging(string value);
    partial void OnLONG_NAMEChanged();
    partial void OnDESCRIPTIONChanging(string value);
    partial void OnDESCRIPTIONChanged();
    #endregion
	
	public ENVIRONMENT()
	{
		this._ROLE_USERs = new EntitySet<ROLE_USER>(new Action<ROLE_USER>(this.attach_ROLE_USERs), new Action<ROLE_USER>(this.detach_ROLE_USERs));
		OnCreated();
	}
	
	[Column(Storage="_ENVIRONMENT_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid ENVIRONMENT_ID
	{
		get
		{
			return this._ENVIRONMENT_ID;
		}
		set
		{
			if ((this._ENVIRONMENT_ID != value))
			{
				this.OnENVIRONMENT_IDChanging(value);
				this.SendPropertyChanging();
				this._ENVIRONMENT_ID = value;
				this.SendPropertyChanged("ENVIRONMENT_ID");
				this.OnENVIRONMENT_IDChanged();
			}
		}
	}
	
	[Column(Storage="_SHORT_NAME", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
	public string SHORT_NAME
	{
		get
		{
			return this._SHORT_NAME;
		}
		set
		{
			if ((this._SHORT_NAME != value))
			{
				this.OnSHORT_NAMEChanging(value);
				this.SendPropertyChanging();
				this._SHORT_NAME = value;
				this.SendPropertyChanged("SHORT_NAME");
				this.OnSHORT_NAMEChanged();
			}
		}
	}
	
	[Column(Storage="_LONG_NAME", DbType="VarChar(40)")]
	public string LONG_NAME
	{
		get
		{
			return this._LONG_NAME;
		}
		set
		{
			if ((this._LONG_NAME != value))
			{
				this.OnLONG_NAMEChanging(value);
				this.SendPropertyChanging();
				this._LONG_NAME = value;
				this.SendPropertyChanged("LONG_NAME");
				this.OnLONG_NAMEChanged();
			}
		}
	}
	
	[Column(Storage="_DESCRIPTION", DbType="VarChar(150)")]
	public string DESCRIPTION
	{
		get
		{
			return this._DESCRIPTION;
		}
		set
		{
			if ((this._DESCRIPTION != value))
			{
				this.OnDESCRIPTIONChanging(value);
				this.SendPropertyChanging();
				this._DESCRIPTION = value;
				this.SendPropertyChanged("DESCRIPTION");
				this.OnDESCRIPTIONChanged();
			}
		}
	}
	
	[Association(Name="ENVIRONMENT_ROLE_USER", Storage="_ROLE_USERs", ThisKey="ENVIRONMENT_ID", OtherKey="ENVIRONMENT_ID")]
	public EntitySet<ROLE_USER> ROLE_USERs
	{
		get
		{
			return this._ROLE_USERs;
		}
		set
		{
			this._ROLE_USERs.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_ROLE_USERs(ROLE_USER entity)
	{
		this.SendPropertyChanging();
		entity.ENVIRONMENT = this;
	}
	
	private void detach_ROLE_USERs(ROLE_USER entity)
	{
		this.SendPropertyChanging();
		entity.ENVIRONMENT = null;
	}
}

[Table(Name="dbo.HISTORY")]
public partial class HISTORY : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _RECORD_ID;
	
	private string _USER_NAME;
	
	private string _ROLE_NAME;
	
	private string _LENDER_SHORT_NAME;
	
	private string _ENVIRONMENT_NAME;
	
	private string _PERMISSION_NAME;
	
	private System.Nullable<System.DateTime> _MODIFIED_DATE;
	
	private string _MODIFIED_BY;
	
	private string _CHANGE_DESCRIPTION;
	
	private string _CHANGE_REASON;
	
	private System.Nullable<System.Guid> _ROLE_ID;
	
	private System.Nullable<System.Guid> _LENDER_ID;
	
	private System.Nullable<System.Guid> _ENVIRONMENT_ID;
	
	private string _COMPUTER_NAME;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRECORD_IDChanging(System.Guid value);
    partial void OnRECORD_IDChanged();
    partial void OnUSER_NAMEChanging(string value);
    partial void OnUSER_NAMEChanged();
    partial void OnROLE_NAMEChanging(string value);
    partial void OnROLE_NAMEChanged();
    partial void OnLENDER_SHORT_NAMEChanging(string value);
    partial void OnLENDER_SHORT_NAMEChanged();
    partial void OnENVIRONMENT_NAMEChanging(string value);
    partial void OnENVIRONMENT_NAMEChanged();
    partial void OnPERMISSION_NAMEChanging(string value);
    partial void OnPERMISSION_NAMEChanged();
    partial void OnMODIFIED_DATEChanging(System.Nullable<System.DateTime> value);
    partial void OnMODIFIED_DATEChanged();
    partial void OnMODIFIED_BYChanging(string value);
    partial void OnMODIFIED_BYChanged();
    partial void OnCHANGE_DESCRIPTIONChanging(string value);
    partial void OnCHANGE_DESCRIPTIONChanged();
    partial void OnCHANGE_REASONChanging(string value);
    partial void OnCHANGE_REASONChanged();
    partial void OnROLE_IDChanging(System.Nullable<System.Guid> value);
    partial void OnROLE_IDChanged();
    partial void OnLENDER_IDChanging(System.Nullable<System.Guid> value);
    partial void OnLENDER_IDChanged();
    partial void OnENVIRONMENT_IDChanging(System.Nullable<System.Guid> value);
    partial void OnENVIRONMENT_IDChanged();
    partial void OnCOMPUTER_NAMEChanging(string value);
    partial void OnCOMPUTER_NAMEChanged();
    #endregion
	
	public HISTORY()
	{
		OnCreated();
	}
	
	[Column(Storage="_RECORD_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid RECORD_ID
	{
		get
		{
			return this._RECORD_ID;
		}
		set
		{
			if ((this._RECORD_ID != value))
			{
				this.OnRECORD_IDChanging(value);
				this.SendPropertyChanging();
				this._RECORD_ID = value;
				this.SendPropertyChanged("RECORD_ID");
				this.OnRECORD_IDChanged();
			}
		}
	}
	
	[Column(Storage="_USER_NAME", DbType="VarChar(50)")]
	public string USER_NAME
	{
		get
		{
			return this._USER_NAME;
		}
		set
		{
			if ((this._USER_NAME != value))
			{
				this.OnUSER_NAMEChanging(value);
				this.SendPropertyChanging();
				this._USER_NAME = value;
				this.SendPropertyChanged("USER_NAME");
				this.OnUSER_NAMEChanged();
			}
		}
	}
	
	[Column(Storage="_ROLE_NAME", DbType="VarChar(30)")]
	public string ROLE_NAME
	{
		get
		{
			return this._ROLE_NAME;
		}
		set
		{
			if ((this._ROLE_NAME != value))
			{
				this.OnROLE_NAMEChanging(value);
				this.SendPropertyChanging();
				this._ROLE_NAME = value;
				this.SendPropertyChanged("ROLE_NAME");
				this.OnROLE_NAMEChanged();
			}
		}
	}
	
	[Column(Storage="_LENDER_SHORT_NAME", DbType="VarChar(8)")]
	public string LENDER_SHORT_NAME
	{
		get
		{
			return this._LENDER_SHORT_NAME;
		}
		set
		{
			if ((this._LENDER_SHORT_NAME != value))
			{
				this.OnLENDER_SHORT_NAMEChanging(value);
				this.SendPropertyChanging();
				this._LENDER_SHORT_NAME = value;
				this.SendPropertyChanged("LENDER_SHORT_NAME");
				this.OnLENDER_SHORT_NAMEChanged();
			}
		}
	}
	
	[Column(Storage="_ENVIRONMENT_NAME", DbType="VarChar(30)")]
	public string ENVIRONMENT_NAME
	{
		get
		{
			return this._ENVIRONMENT_NAME;
		}
		set
		{
			if ((this._ENVIRONMENT_NAME != value))
			{
				this.OnENVIRONMENT_NAMEChanging(value);
				this.SendPropertyChanging();
				this._ENVIRONMENT_NAME = value;
				this.SendPropertyChanged("ENVIRONMENT_NAME");
				this.OnENVIRONMENT_NAMEChanged();
			}
		}
	}
	
	[Column(Storage="_PERMISSION_NAME", DbType="VarChar(50)")]
	public string PERMISSION_NAME
	{
		get
		{
			return this._PERMISSION_NAME;
		}
		set
		{
			if ((this._PERMISSION_NAME != value))
			{
				this.OnPERMISSION_NAMEChanging(value);
				this.SendPropertyChanging();
				this._PERMISSION_NAME = value;
				this.SendPropertyChanged("PERMISSION_NAME");
				this.OnPERMISSION_NAMEChanged();
			}
		}
	}
	
	[Column(Storage="_MODIFIED_DATE", DbType="DateTime")]
	public System.Nullable<System.DateTime> MODIFIED_DATE
	{
		get
		{
			return this._MODIFIED_DATE;
		}
		set
		{
			if ((this._MODIFIED_DATE != value))
			{
				this.OnMODIFIED_DATEChanging(value);
				this.SendPropertyChanging();
				this._MODIFIED_DATE = value;
				this.SendPropertyChanged("MODIFIED_DATE");
				this.OnMODIFIED_DATEChanged();
			}
		}
	}
	
	[Column(Storage="_MODIFIED_BY", DbType="VarChar(50)")]
	public string MODIFIED_BY
	{
		get
		{
			return this._MODIFIED_BY;
		}
		set
		{
			if ((this._MODIFIED_BY != value))
			{
				this.OnMODIFIED_BYChanging(value);
				this.SendPropertyChanging();
				this._MODIFIED_BY = value;
				this.SendPropertyChanged("MODIFIED_BY");
				this.OnMODIFIED_BYChanged();
			}
		}
	}
	
	[Column(Storage="_CHANGE_DESCRIPTION", DbType="VarChar(100)")]
	public string CHANGE_DESCRIPTION
	{
		get
		{
			return this._CHANGE_DESCRIPTION;
		}
		set
		{
			if ((this._CHANGE_DESCRIPTION != value))
			{
				this.OnCHANGE_DESCRIPTIONChanging(value);
				this.SendPropertyChanging();
				this._CHANGE_DESCRIPTION = value;
				this.SendPropertyChanged("CHANGE_DESCRIPTION");
				this.OnCHANGE_DESCRIPTIONChanged();
			}
		}
	}
	
	[Column(Storage="_CHANGE_REASON", DbType="VarChar(150)")]
	public string CHANGE_REASON
	{
		get
		{
			return this._CHANGE_REASON;
		}
		set
		{
			if ((this._CHANGE_REASON != value))
			{
				this.OnCHANGE_REASONChanging(value);
				this.SendPropertyChanging();
				this._CHANGE_REASON = value;
				this.SendPropertyChanged("CHANGE_REASON");
				this.OnCHANGE_REASONChanged();
			}
		}
	}
	
	[Column(Storage="_ROLE_ID", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> ROLE_ID
	{
		get
		{
			return this._ROLE_ID;
		}
		set
		{
			if ((this._ROLE_ID != value))
			{
				this.OnROLE_IDChanging(value);
				this.SendPropertyChanging();
				this._ROLE_ID = value;
				this.SendPropertyChanged("ROLE_ID");
				this.OnROLE_IDChanged();
			}
		}
	}
	
	[Column(Storage="_LENDER_ID", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> LENDER_ID
	{
		get
		{
			return this._LENDER_ID;
		}
		set
		{
			if ((this._LENDER_ID != value))
			{
				this.OnLENDER_IDChanging(value);
				this.SendPropertyChanging();
				this._LENDER_ID = value;
				this.SendPropertyChanged("LENDER_ID");
				this.OnLENDER_IDChanged();
			}
		}
	}
	
	[Column(Storage="_ENVIRONMENT_ID", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> ENVIRONMENT_ID
	{
		get
		{
			return this._ENVIRONMENT_ID;
		}
		set
		{
			if ((this._ENVIRONMENT_ID != value))
			{
				this.OnENVIRONMENT_IDChanging(value);
				this.SendPropertyChanging();
				this._ENVIRONMENT_ID = value;
				this.SendPropertyChanged("ENVIRONMENT_ID");
				this.OnENVIRONMENT_IDChanged();
			}
		}
	}
	
	[Column(Storage="_COMPUTER_NAME", DbType="VarChar(50)")]
	public string COMPUTER_NAME
	{
		get
		{
			return this._COMPUTER_NAME;
		}
		set
		{
			if ((this._COMPUTER_NAME != value))
			{
				this.OnCOMPUTER_NAMEChanging(value);
				this.SendPropertyChanging();
				this._COMPUTER_NAME = value;
				this.SendPropertyChanged("COMPUTER_NAME");
				this.OnCOMPUTER_NAMEChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.LOOKUP_LANGUAGE")]
public partial class LOOKUP_LANGUAGE
{
	
	private string _LANGUAGE_CODE;
	
	private string _CATEGORY;
	
	private string _KEY;
	
	private int _SEQUENCE;
	
	private string _VALUE;
	
	public LOOKUP_LANGUAGE()
	{
	}
	
	[Column(Storage="_LANGUAGE_CODE", DbType="NChar(2) NOT NULL", CanBeNull=false)]
	public string LANGUAGE_CODE
	{
		get
		{
			return this._LANGUAGE_CODE;
		}
		set
		{
			if ((this._LANGUAGE_CODE != value))
			{
				this._LANGUAGE_CODE = value;
			}
		}
	}
	
	[Column(Storage="_CATEGORY", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
	public string CATEGORY
	{
		get
		{
			return this._CATEGORY;
		}
		set
		{
			if ((this._CATEGORY != value))
			{
				this._CATEGORY = value;
			}
		}
	}
	
	[Column(Name="[KEY]", Storage="_KEY", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
	public string KEY
	{
		get
		{
			return this._KEY;
		}
		set
		{
			if ((this._KEY != value))
			{
				this._KEY = value;
			}
		}
	}
	
	[Column(Storage="_SEQUENCE", DbType="Int NOT NULL")]
	public int SEQUENCE
	{
		get
		{
			return this._SEQUENCE;
		}
		set
		{
			if ((this._SEQUENCE != value))
			{
				this._SEQUENCE = value;
			}
		}
	}
	
	[Column(Storage="_VALUE", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
	public string VALUE
	{
		get
		{
			return this._VALUE;
		}
		set
		{
			if ((this._VALUE != value))
			{
				this._VALUE = value;
			}
		}
	}
}

[Table(Name="dbo.MDE_LENDER")]
public partial class MDE_LENDER : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _LENDER_ID;
	
	private string _SHORT_NAME;
	
	private string _LONG_NAME;
	
	private string _DESCRIPTION;
	
	private EntitySet<ROLE_USER> _ROLE_USERs;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLENDER_IDChanging(System.Guid value);
    partial void OnLENDER_IDChanged();
    partial void OnSHORT_NAMEChanging(string value);
    partial void OnSHORT_NAMEChanged();
    partial void OnLONG_NAMEChanging(string value);
    partial void OnLONG_NAMEChanged();
    partial void OnDESCRIPTIONChanging(string value);
    partial void OnDESCRIPTIONChanged();
    #endregion
	
	public MDE_LENDER()
	{
		this._ROLE_USERs = new EntitySet<ROLE_USER>(new Action<ROLE_USER>(this.attach_ROLE_USERs), new Action<ROLE_USER>(this.detach_ROLE_USERs));
		OnCreated();
	}
	
	[Column(Storage="_LENDER_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid LENDER_ID
	{
		get
		{
			return this._LENDER_ID;
		}
		set
		{
			if ((this._LENDER_ID != value))
			{
				this.OnLENDER_IDChanging(value);
				this.SendPropertyChanging();
				this._LENDER_ID = value;
				this.SendPropertyChanged("LENDER_ID");
				this.OnLENDER_IDChanged();
			}
		}
	}
	
	[Column(Storage="_SHORT_NAME", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
	public string SHORT_NAME
	{
		get
		{
			return this._SHORT_NAME;
		}
		set
		{
			if ((this._SHORT_NAME != value))
			{
				this.OnSHORT_NAMEChanging(value);
				this.SendPropertyChanging();
				this._SHORT_NAME = value;
				this.SendPropertyChanged("SHORT_NAME");
				this.OnSHORT_NAMEChanged();
			}
		}
	}
	
	[Column(Storage="_LONG_NAME", DbType="VarChar(40) NOT NULL", CanBeNull=false)]
	public string LONG_NAME
	{
		get
		{
			return this._LONG_NAME;
		}
		set
		{
			if ((this._LONG_NAME != value))
			{
				this.OnLONG_NAMEChanging(value);
				this.SendPropertyChanging();
				this._LONG_NAME = value;
				this.SendPropertyChanged("LONG_NAME");
				this.OnLONG_NAMEChanged();
			}
		}
	}
	
	[Column(Storage="_DESCRIPTION", DbType="VarChar(150)")]
	public string DESCRIPTION
	{
		get
		{
			return this._DESCRIPTION;
		}
		set
		{
			if ((this._DESCRIPTION != value))
			{
				this.OnDESCRIPTIONChanging(value);
				this.SendPropertyChanging();
				this._DESCRIPTION = value;
				this.SendPropertyChanged("DESCRIPTION");
				this.OnDESCRIPTIONChanged();
			}
		}
	}
	
	[Association(Name="MDE_LENDER_ROLE_USER", Storage="_ROLE_USERs", ThisKey="LENDER_ID", OtherKey="LENDER_ID")]
	public EntitySet<ROLE_USER> ROLE_USERs
	{
		get
		{
			return this._ROLE_USERs;
		}
		set
		{
			this._ROLE_USERs.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_ROLE_USERs(ROLE_USER entity)
	{
		this.SendPropertyChanging();
		entity.MDE_LENDER = this;
	}
	
	private void detach_ROLE_USERs(ROLE_USER entity)
	{
		this.SendPropertyChanging();
		entity.MDE_LENDER = null;
	}
}

[Table(Name="dbo.PERMISSION")]
public partial class PERMISSION : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _LANGUAGE_CODE;
	
	private System.Guid _PERMISSION_ID;
	
	private string _PERMISSION_NAME;
	
	private string _DESCRIPTION;
	
	private string _MODIFIED_BY;
	
	private EntitySet<ROLE_PERMISSION> _ROLE_PERMISSIONs;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLANGUAGE_CODEChanging(string value);
    partial void OnLANGUAGE_CODEChanged();
    partial void OnPERMISSION_IDChanging(System.Guid value);
    partial void OnPERMISSION_IDChanged();
    partial void OnPERMISSION_NAMEChanging(string value);
    partial void OnPERMISSION_NAMEChanged();
    partial void OnDESCRIPTIONChanging(string value);
    partial void OnDESCRIPTIONChanged();
    partial void OnMODIFIED_BYChanging(string value);
    partial void OnMODIFIED_BYChanged();
    #endregion
	
	public PERMISSION()
	{
		this._ROLE_PERMISSIONs = new EntitySet<ROLE_PERMISSION>(new Action<ROLE_PERMISSION>(this.attach_ROLE_PERMISSIONs), new Action<ROLE_PERMISSION>(this.detach_ROLE_PERMISSIONs));
		OnCreated();
	}
	
	[Column(Storage="_LANGUAGE_CODE", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
	public string LANGUAGE_CODE
	{
		get
		{
			return this._LANGUAGE_CODE;
		}
		set
		{
			if ((this._LANGUAGE_CODE != value))
			{
				this.OnLANGUAGE_CODEChanging(value);
				this.SendPropertyChanging();
				this._LANGUAGE_CODE = value;
				this.SendPropertyChanged("LANGUAGE_CODE");
				this.OnLANGUAGE_CODEChanged();
			}
		}
	}
	
	[Column(Storage="_PERMISSION_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid PERMISSION_ID
	{
		get
		{
			return this._PERMISSION_ID;
		}
		set
		{
			if ((this._PERMISSION_ID != value))
			{
				this.OnPERMISSION_IDChanging(value);
				this.SendPropertyChanging();
				this._PERMISSION_ID = value;
				this.SendPropertyChanged("PERMISSION_ID");
				this.OnPERMISSION_IDChanged();
			}
		}
	}
	
	[Column(Storage="_PERMISSION_NAME", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string PERMISSION_NAME
	{
		get
		{
			return this._PERMISSION_NAME;
		}
		set
		{
			if ((this._PERMISSION_NAME != value))
			{
				this.OnPERMISSION_NAMEChanging(value);
				this.SendPropertyChanging();
				this._PERMISSION_NAME = value;
				this.SendPropertyChanged("PERMISSION_NAME");
				this.OnPERMISSION_NAMEChanged();
			}
		}
	}
	
	[Column(Storage="_DESCRIPTION", DbType="NVarChar(150)")]
	public string DESCRIPTION
	{
		get
		{
			return this._DESCRIPTION;
		}
		set
		{
			if ((this._DESCRIPTION != value))
			{
				this.OnDESCRIPTIONChanging(value);
				this.SendPropertyChanging();
				this._DESCRIPTION = value;
				this.SendPropertyChanged("DESCRIPTION");
				this.OnDESCRIPTIONChanged();
			}
		}
	}
	
	[Column(Storage="_MODIFIED_BY", DbType="NVarChar(50)")]
	public string MODIFIED_BY
	{
		get
		{
			return this._MODIFIED_BY;
		}
		set
		{
			if ((this._MODIFIED_BY != value))
			{
				this.OnMODIFIED_BYChanging(value);
				this.SendPropertyChanging();
				this._MODIFIED_BY = value;
				this.SendPropertyChanged("MODIFIED_BY");
				this.OnMODIFIED_BYChanged();
			}
		}
	}
	
	[Association(Name="PERMISSION_ROLE_PERMISSION", Storage="_ROLE_PERMISSIONs", ThisKey="PERMISSION_ID", OtherKey="PERMISSION_ID")]
	public EntitySet<ROLE_PERMISSION> ROLE_PERMISSIONs
	{
		get
		{
			return this._ROLE_PERMISSIONs;
		}
		set
		{
			this._ROLE_PERMISSIONs.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_ROLE_PERMISSIONs(ROLE_PERMISSION entity)
	{
		this.SendPropertyChanging();
		entity.PERMISSION = this;
	}
	
	private void detach_ROLE_PERMISSIONs(ROLE_PERMISSION entity)
	{
		this.SendPropertyChanging();
		entity.PERMISSION = null;
	}
}

[Table(Name="dbo.ROLE")]
public partial class ROLE : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ROLE_ID;
	
	private string _ROLE_NAME;
	
	private string _DESCRIPTION;
	
	private string _MODIFIED_BY;
	
	private string _CHANGE_REASON;
	
	private EntitySet<ROLE_PERMISSION> _ROLE_PERMISSIONs;
	
	private EntitySet<ROLE_USER> _ROLE_USERs;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnROLE_IDChanging(System.Guid value);
    partial void OnROLE_IDChanged();
    partial void OnROLE_NAMEChanging(string value);
    partial void OnROLE_NAMEChanged();
    partial void OnDESCRIPTIONChanging(string value);
    partial void OnDESCRIPTIONChanged();
    partial void OnMODIFIED_BYChanging(string value);
    partial void OnMODIFIED_BYChanged();
    partial void OnCHANGE_REASONChanging(string value);
    partial void OnCHANGE_REASONChanged();
    #endregion
	
	public ROLE()
	{
		this._ROLE_PERMISSIONs = new EntitySet<ROLE_PERMISSION>(new Action<ROLE_PERMISSION>(this.attach_ROLE_PERMISSIONs), new Action<ROLE_PERMISSION>(this.detach_ROLE_PERMISSIONs));
		this._ROLE_USERs = new EntitySet<ROLE_USER>(new Action<ROLE_USER>(this.attach_ROLE_USERs), new Action<ROLE_USER>(this.detach_ROLE_USERs));
		OnCreated();
	}
	
	[Column(Storage="_ROLE_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid ROLE_ID
	{
		get
		{
			return this._ROLE_ID;
		}
		set
		{
			if ((this._ROLE_ID != value))
			{
				this.OnROLE_IDChanging(value);
				this.SendPropertyChanging();
				this._ROLE_ID = value;
				this.SendPropertyChanged("ROLE_ID");
				this.OnROLE_IDChanged();
			}
		}
	}
	
	[Column(Storage="_ROLE_NAME", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
	public string ROLE_NAME
	{
		get
		{
			return this._ROLE_NAME;
		}
		set
		{
			if ((this._ROLE_NAME != value))
			{
				this.OnROLE_NAMEChanging(value);
				this.SendPropertyChanging();
				this._ROLE_NAME = value;
				this.SendPropertyChanged("ROLE_NAME");
				this.OnROLE_NAMEChanged();
			}
		}
	}
	
	[Column(Storage="_DESCRIPTION", DbType="VarChar(150)")]
	public string DESCRIPTION
	{
		get
		{
			return this._DESCRIPTION;
		}
		set
		{
			if ((this._DESCRIPTION != value))
			{
				this.OnDESCRIPTIONChanging(value);
				this.SendPropertyChanging();
				this._DESCRIPTION = value;
				this.SendPropertyChanged("DESCRIPTION");
				this.OnDESCRIPTIONChanged();
			}
		}
	}
	
	[Column(Storage="_MODIFIED_BY", DbType="VarChar(50)")]
	public string MODIFIED_BY
	{
		get
		{
			return this._MODIFIED_BY;
		}
		set
		{
			if ((this._MODIFIED_BY != value))
			{
				this.OnMODIFIED_BYChanging(value);
				this.SendPropertyChanging();
				this._MODIFIED_BY = value;
				this.SendPropertyChanged("MODIFIED_BY");
				this.OnMODIFIED_BYChanged();
			}
		}
	}
	
	[Column(Storage="_CHANGE_REASON", DbType="VarChar(150)")]
	public string CHANGE_REASON
	{
		get
		{
			return this._CHANGE_REASON;
		}
		set
		{
			if ((this._CHANGE_REASON != value))
			{
				this.OnCHANGE_REASONChanging(value);
				this.SendPropertyChanging();
				this._CHANGE_REASON = value;
				this.SendPropertyChanged("CHANGE_REASON");
				this.OnCHANGE_REASONChanged();
			}
		}
	}
	
	[Association(Name="ROLE_ROLE_PERMISSION", Storage="_ROLE_PERMISSIONs", ThisKey="ROLE_ID", OtherKey="ROLE_ID")]
	public EntitySet<ROLE_PERMISSION> ROLE_PERMISSIONs
	{
		get
		{
			return this._ROLE_PERMISSIONs;
		}
		set
		{
			this._ROLE_PERMISSIONs.Assign(value);
		}
	}
	
	[Association(Name="ROLE_ROLE_USER", Storage="_ROLE_USERs", ThisKey="ROLE_ID", OtherKey="ROLE_ID")]
	public EntitySet<ROLE_USER> ROLE_USERs
	{
		get
		{
			return this._ROLE_USERs;
		}
		set
		{
			this._ROLE_USERs.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_ROLE_PERMISSIONs(ROLE_PERMISSION entity)
	{
		this.SendPropertyChanging();
		entity.ROLE = this;
	}
	
	private void detach_ROLE_PERMISSIONs(ROLE_PERMISSION entity)
	{
		this.SendPropertyChanging();
		entity.ROLE = null;
	}
	
	private void attach_ROLE_USERs(ROLE_USER entity)
	{
		this.SendPropertyChanging();
		entity.ROLE = this;
	}
	
	private void detach_ROLE_USERs(ROLE_USER entity)
	{
		this.SendPropertyChanging();
		entity.ROLE = null;
	}
}

[Table(Name="dbo.ROLE_PERMISSION")]
public partial class ROLE_PERMISSION : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ROLE_ID;
	
	private System.Guid _PERMISSION_ID;
	
	private System.Nullable<bool> _READ_ONLY;
	
	private string _RELEASE_VERSION;
	
	private string _MODIFIED_BY;
	
	private EntityRef<PERMISSION> _PERMISSION;
	
	private EntityRef<ROLE> _ROLE;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnROLE_IDChanging(System.Guid value);
    partial void OnROLE_IDChanged();
    partial void OnPERMISSION_IDChanging(System.Guid value);
    partial void OnPERMISSION_IDChanged();
    partial void OnREAD_ONLYChanging(System.Nullable<bool> value);
    partial void OnREAD_ONLYChanged();
    partial void OnRELEASE_VERSIONChanging(string value);
    partial void OnRELEASE_VERSIONChanged();
    partial void OnMODIFIED_BYChanging(string value);
    partial void OnMODIFIED_BYChanged();
    #endregion
	
	public ROLE_PERMISSION()
	{
		this._PERMISSION = default(EntityRef<PERMISSION>);
		this._ROLE = default(EntityRef<ROLE>);
		OnCreated();
	}
	
	[Column(Storage="_ROLE_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid ROLE_ID
	{
		get
		{
			return this._ROLE_ID;
		}
		set
		{
			if ((this._ROLE_ID != value))
			{
				if (this._ROLE.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnROLE_IDChanging(value);
				this.SendPropertyChanging();
				this._ROLE_ID = value;
				this.SendPropertyChanged("ROLE_ID");
				this.OnROLE_IDChanged();
			}
		}
	}
	
	[Column(Storage="_PERMISSION_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid PERMISSION_ID
	{
		get
		{
			return this._PERMISSION_ID;
		}
		set
		{
			if ((this._PERMISSION_ID != value))
			{
				if (this._PERMISSION.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPERMISSION_IDChanging(value);
				this.SendPropertyChanging();
				this._PERMISSION_ID = value;
				this.SendPropertyChanged("PERMISSION_ID");
				this.OnPERMISSION_IDChanged();
			}
		}
	}
	
	[Column(Storage="_READ_ONLY", DbType="Bit")]
	public System.Nullable<bool> READ_ONLY
	{
		get
		{
			return this._READ_ONLY;
		}
		set
		{
			if ((this._READ_ONLY != value))
			{
				this.OnREAD_ONLYChanging(value);
				this.SendPropertyChanging();
				this._READ_ONLY = value;
				this.SendPropertyChanged("READ_ONLY");
				this.OnREAD_ONLYChanged();
			}
		}
	}
	
	[Column(Storage="_RELEASE_VERSION", DbType="VarChar(30)")]
	public string RELEASE_VERSION
	{
		get
		{
			return this._RELEASE_VERSION;
		}
		set
		{
			if ((this._RELEASE_VERSION != value))
			{
				this.OnRELEASE_VERSIONChanging(value);
				this.SendPropertyChanging();
				this._RELEASE_VERSION = value;
				this.SendPropertyChanged("RELEASE_VERSION");
				this.OnRELEASE_VERSIONChanged();
			}
		}
	}
	
	[Column(Storage="_MODIFIED_BY", DbType="VarChar(50)")]
	public string MODIFIED_BY
	{
		get
		{
			return this._MODIFIED_BY;
		}
		set
		{
			if ((this._MODIFIED_BY != value))
			{
				this.OnMODIFIED_BYChanging(value);
				this.SendPropertyChanging();
				this._MODIFIED_BY = value;
				this.SendPropertyChanged("MODIFIED_BY");
				this.OnMODIFIED_BYChanged();
			}
		}
	}
	
	[Association(Name="PERMISSION_ROLE_PERMISSION", Storage="_PERMISSION", ThisKey="PERMISSION_ID", OtherKey="PERMISSION_ID", IsForeignKey=true)]
	public PERMISSION PERMISSION
	{
		get
		{
			return this._PERMISSION.Entity;
		}
		set
		{
			PERMISSION previousValue = this._PERMISSION.Entity;
			if (((previousValue != value) 
						|| (this._PERMISSION.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._PERMISSION.Entity = null;
					previousValue.ROLE_PERMISSIONs.Remove(this);
				}
				this._PERMISSION.Entity = value;
				if ((value != null))
				{
					value.ROLE_PERMISSIONs.Add(this);
					this._PERMISSION_ID = value.PERMISSION_ID;
				}
				else
				{
					this._PERMISSION_ID = default(System.Guid);
				}
				this.SendPropertyChanged("PERMISSION");
			}
		}
	}
	
	[Association(Name="ROLE_ROLE_PERMISSION", Storage="_ROLE", ThisKey="ROLE_ID", OtherKey="ROLE_ID", IsForeignKey=true)]
	public ROLE ROLE
	{
		get
		{
			return this._ROLE.Entity;
		}
		set
		{
			ROLE previousValue = this._ROLE.Entity;
			if (((previousValue != value) 
						|| (this._ROLE.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ROLE.Entity = null;
					previousValue.ROLE_PERMISSIONs.Remove(this);
				}
				this._ROLE.Entity = value;
				if ((value != null))
				{
					value.ROLE_PERMISSIONs.Add(this);
					this._ROLE_ID = value.ROLE_ID;
				}
				else
				{
					this._ROLE_ID = default(System.Guid);
				}
				this.SendPropertyChanged("ROLE");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.ROLE_USER")]
public partial class ROLE_USER : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _USER_NAME;
	
	private System.Guid _LENDER_ID;
	
	private System.Guid _ENVIRONMENT_ID;
	
	private System.Guid _ROLE_ID;
	
	private string _MODIFIED_BY;
	
	private string _CHANGE_REASON;
	
	private EntityRef<ENVIRONMENT> _ENVIRONMENT;
	
	private EntityRef<MDE_LENDER> _MDE_LENDER;
	
	private EntityRef<ROLE> _ROLE;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUSER_NAMEChanging(string value);
    partial void OnUSER_NAMEChanged();
    partial void OnLENDER_IDChanging(System.Guid value);
    partial void OnLENDER_IDChanged();
    partial void OnENVIRONMENT_IDChanging(System.Guid value);
    partial void OnENVIRONMENT_IDChanged();
    partial void OnROLE_IDChanging(System.Guid value);
    partial void OnROLE_IDChanged();
    partial void OnMODIFIED_BYChanging(string value);
    partial void OnMODIFIED_BYChanged();
    partial void OnCHANGE_REASONChanging(string value);
    partial void OnCHANGE_REASONChanged();
    #endregion
	
	public ROLE_USER()
	{
		this._ENVIRONMENT = default(EntityRef<ENVIRONMENT>);
		this._MDE_LENDER = default(EntityRef<MDE_LENDER>);
		this._ROLE = default(EntityRef<ROLE>);
		OnCreated();
	}
	
	[Column(Storage="_USER_NAME", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string USER_NAME
	{
		get
		{
			return this._USER_NAME;
		}
		set
		{
			if ((this._USER_NAME != value))
			{
				this.OnUSER_NAMEChanging(value);
				this.SendPropertyChanging();
				this._USER_NAME = value;
				this.SendPropertyChanged("USER_NAME");
				this.OnUSER_NAMEChanged();
			}
		}
	}
	
	[Column(Storage="_LENDER_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid LENDER_ID
	{
		get
		{
			return this._LENDER_ID;
		}
		set
		{
			if ((this._LENDER_ID != value))
			{
				if (this._MDE_LENDER.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnLENDER_IDChanging(value);
				this.SendPropertyChanging();
				this._LENDER_ID = value;
				this.SendPropertyChanged("LENDER_ID");
				this.OnLENDER_IDChanged();
			}
		}
	}
	
	[Column(Storage="_ENVIRONMENT_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid ENVIRONMENT_ID
	{
		get
		{
			return this._ENVIRONMENT_ID;
		}
		set
		{
			if ((this._ENVIRONMENT_ID != value))
			{
				if (this._ENVIRONMENT.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnENVIRONMENT_IDChanging(value);
				this.SendPropertyChanging();
				this._ENVIRONMENT_ID = value;
				this.SendPropertyChanged("ENVIRONMENT_ID");
				this.OnENVIRONMENT_IDChanged();
			}
		}
	}
	
	[Column(Storage="_ROLE_ID", DbType="UniqueIdentifier NOT NULL")]
	public System.Guid ROLE_ID
	{
		get
		{
			return this._ROLE_ID;
		}
		set
		{
			if ((this._ROLE_ID != value))
			{
				if (this._ROLE.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnROLE_IDChanging(value);
				this.SendPropertyChanging();
				this._ROLE_ID = value;
				this.SendPropertyChanged("ROLE_ID");
				this.OnROLE_IDChanged();
			}
		}
	}
	
	[Column(Storage="_MODIFIED_BY", DbType="VarChar(50)")]
	public string MODIFIED_BY
	{
		get
		{
			return this._MODIFIED_BY;
		}
		set
		{
			if ((this._MODIFIED_BY != value))
			{
				this.OnMODIFIED_BYChanging(value);
				this.SendPropertyChanging();
				this._MODIFIED_BY = value;
				this.SendPropertyChanged("MODIFIED_BY");
				this.OnMODIFIED_BYChanged();
			}
		}
	}
	
	[Column(Storage="_CHANGE_REASON", DbType="VarChar(150)")]
	public string CHANGE_REASON
	{
		get
		{
			return this._CHANGE_REASON;
		}
		set
		{
			if ((this._CHANGE_REASON != value))
			{
				this.OnCHANGE_REASONChanging(value);
				this.SendPropertyChanging();
				this._CHANGE_REASON = value;
				this.SendPropertyChanged("CHANGE_REASON");
				this.OnCHANGE_REASONChanged();
			}
		}
	}
	
	[Association(Name="ENVIRONMENT_ROLE_USER", Storage="_ENVIRONMENT", ThisKey="ENVIRONMENT_ID", OtherKey="ENVIRONMENT_ID", IsForeignKey=true)]
	public ENVIRONMENT ENVIRONMENT
	{
		get
		{
			return this._ENVIRONMENT.Entity;
		}
		set
		{
			ENVIRONMENT previousValue = this._ENVIRONMENT.Entity;
			if (((previousValue != value) 
						|| (this._ENVIRONMENT.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ENVIRONMENT.Entity = null;
					previousValue.ROLE_USERs.Remove(this);
				}
				this._ENVIRONMENT.Entity = value;
				if ((value != null))
				{
					value.ROLE_USERs.Add(this);
					this._ENVIRONMENT_ID = value.ENVIRONMENT_ID;
				}
				else
				{
					this._ENVIRONMENT_ID = default(System.Guid);
				}
				this.SendPropertyChanged("ENVIRONMENT");
			}
		}
	}
	
	[Association(Name="MDE_LENDER_ROLE_USER", Storage="_MDE_LENDER", ThisKey="LENDER_ID", OtherKey="LENDER_ID", IsForeignKey=true)]
	public MDE_LENDER MDE_LENDER
	{
		get
		{
			return this._MDE_LENDER.Entity;
		}
		set
		{
			MDE_LENDER previousValue = this._MDE_LENDER.Entity;
			if (((previousValue != value) 
						|| (this._MDE_LENDER.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._MDE_LENDER.Entity = null;
					previousValue.ROLE_USERs.Remove(this);
				}
				this._MDE_LENDER.Entity = value;
				if ((value != null))
				{
					value.ROLE_USERs.Add(this);
					this._LENDER_ID = value.LENDER_ID;
				}
				else
				{
					this._LENDER_ID = default(System.Guid);
				}
				this.SendPropertyChanged("MDE_LENDER");
			}
		}
	}
	
	[Association(Name="ROLE_ROLE_USER", Storage="_ROLE", ThisKey="ROLE_ID", OtherKey="ROLE_ID", IsForeignKey=true)]
	public ROLE ROLE
	{
		get
		{
			return this._ROLE.Entity;
		}
		set
		{
			ROLE previousValue = this._ROLE.Entity;
			if (((previousValue != value) 
						|| (this._ROLE.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ROLE.Entity = null;
					previousValue.ROLE_USERs.Remove(this);
				}
				this._ROLE.Entity = value;
				if ((value != null))
				{
					value.ROLE_USERs.Add(this);
					this._ROLE_ID = value.ROLE_ID;
				}
				else
				{
					this._ROLE_ID = default(System.Guid);
				}
				this.SendPropertyChanged("ROLE");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
